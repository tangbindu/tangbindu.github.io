doctype html
html(data-use-rem)
  head
    meta(charset="utf-8")
    meta(name="format-detection", content="telephone=no")
    meta(name="viewport", content="width=device-width,initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no")
    meta(name="apple-mobile-web-app-capable", content="yes")
    meta(name="apple-mobile-web-app-status-bar-style", content="black")
    meta(name="description",content="")
    meta(name="keywords",content="")
    title shader1
    link(rel="stylesheet",href="../css/index.css")
  body(ontouchstart="")
    canvas(id="c" style="height:400px;width:500px;")
    script(src="../js/twgl.min.js")
    script(id="vs" type="notjs").
      attribute vec4 position; 
      void main() { 
        gl_Position = position; 
      }
    script(id="fs" type="notjs").
      precision mediump float; 
      uniform vec2 resolution; 
      uniform float time; 
      void main() { 
      vec2 uv = gl_FragCoord.xy / resolution; float color = 0.0; // lifted from glslsandbox.com 
      color += sin( uv.x * cos( time / 3.0 ) * 60.0 ) + cos( uv.y * cos( time / 2.80 ) * 10.0 ); 
      color += sin( uv.y * sin( time / 2.0 ) * 40.0 ) + cos( uv.x * sin( time / 1.70 ) * 40.0 ); color += sin( uv.x * sin( time / 1.0 ) * 10.0 ) + sin( uv.y * sin( time / 3.50 ) * 80.0 ); color *= sin( time / 10.0 ) * 0.5; 
        gl_FragColor = vec4( vec3( color * 0.5, sin( color + time / 2.5 ) * 0.75, color ), 1.0 ); 
      }
    script.
        var gl = twgl.getWebGLContext(document.getElementById("c"));
        var programInfo = twgl.createProgramInfo(gl, ["vs", "fs"]);
      
        var arrays = {
            position: [-1, -1, 0, 1, -1, 0, -1, 1, 0, -1, 1, 0, 1, -1, 0, 1, 1, 0],
        };
        var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);
      
        function render(time) {
            twgl.resizeCanvasToDisplaySize(gl.canvas);
            gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
            var uniforms = {
              time: time * 0.001,
              resolution: [gl.canvas.width, gl.canvas.height],
            };

            gl.useProgram(programInfo.program);
            twgl.setBuffersAndAttributes(gl, programInfo, bufferInfo);
            twgl.setUniforms(programInfo, uniforms);
            twgl.drawBufferInfo(gl, gl.TRIANGLES, bufferInfo);

            requestAnimationFrame(render);
        }
        requestAnimationFrame(render);

